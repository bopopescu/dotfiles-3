[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_ft = ['dart', 'python', 'ruby']
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''


[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
nmap <silent> <C-f> <Plug>(dirvish_up)
" nmap <silent> <C-f> :<C-u>Dirvish<CR>
'''

# https://github.com/neoclide/coc.nvim
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_ft = ['dart', 'python', 'ruby']
hook_add = '''
set hidden  " Required for operations modifying multiple buffers like rename.

" https://lsp.readthedocs.io/en/latest
"
let g:LanguageClient_serverCommands = {
    \ 'dart': ['dart_language_server'],
    \ 'python': ['pyls'],
    \ 'ruby': ['solargraph', 'stdio'],
    \ }

nnoremap <silent> H :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

let s:lsp_stack = []
let s:lsp_stack_level = 0

function! MyGoToDefinition(...) abort
  " Get the current position
  let l:fname = expand('%:p')
  let l:line = line(".")
  let l:col = col(".")

  " Call the original function to jump to the definition
  let l:result = LanguageClient_runSync('LanguageClient#textDocument_definition', {
              \ 'handle': v:true,
              \ })

  " Get the position of definition
  let l:jump_fname = expand('%:p')
  let l:jump_line = line(".")
  let l:jump_col = col(".")

  " If the position is the same as previous, ignore the jump action
  if l:fname == l:jump_fname && l:line == l:jump_line
     return
  endif

  " Remove anything newer than the current position, just like basic
  " vim tag support
  if s:lsp_stack_level == 0
    let s:lsp_stack = []
  else
    let s:lsp_stack = s:lsp_stack[0:s:lsp_stack_level-1]
  endif

  " Push entry into stack
  let s:lsp_stack_level += 1
  let l:stack_entry = {'line': l:line, 'col': l:col, 'file': l:fname}
  call add(s:lsp_stack, l:stack_entry)
endfunction

function! MyTagStackPop() abort
  if s:lsp_stack_level == 0
    echo "lsp stack empty!"
    return
  endif

  " Get previous position
  let l:curr_stack_level = s:lsp_stack_level - 1
  let l:jump_entry = s:lsp_stack[l:curr_stack_level]

  " Pop stack
  let s:lsp_stack = s:lsp_stack[0:l:curr_stack_level]
  let s:lsp_stack_level = s:lsp_stack_level - 1

  " Jump to previous location
  if &modified
    exec 'hide edit'  l:jump_entry['file']
  else
    exec 'edit' l:jump_entry['file']
  endif

  call cursor(l:jump_entry['line'], l:jump_entry['col'])
  normal! zz
endfunction
'''


[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'


[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = 'dart'

[[plugins]]
repo = 'tweekmonster/django-plus.vim'
on_ft = 'django'
[[plugins]]
repo = 'vim-scripts/django.vim'
on_ft = 'django'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'
hook_add = '''
let g:rubycomplete_rails = 1
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_include_object = 1
let g:rubycomplete_include_object_space = 1
'''

[[plugins]]
repo = 'elixir-editors/vim-elixir'
on_ft = 'elixir'
[[plugins]]
repo = 'slashmili/alchemist.vim'
on_ft = 'elixir'
# https://github.com/slashmili/alchemist.vim/wiki
#hook_add = '''
#let g:alchemist_tag_map = '<C-]>'
#let g:alchemist_tag_stack_map = '<C-T>'
#```

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'nginx'
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = 'nginx'

[[plugins]]
repo = 'fatih/vim-go.git'
on_ft = 'go'
hook_add = '''
set completeopt=menu,preview
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
'''
[[plugins]]
repo = 'dgryski/vim-godef'
on_ft = 'go'
hook_add = '''
au FileType go nmap <C-\> <Plug>(go-def-vertical)
au FileType go nmap <C-]> <Plug>(go-def)
'''
[[plugins]]
repo = 'vim-jp/vim-go-extra'
on_ft = 'go'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
let g:precious_enable_switchers = {
\	"html" : {
\		"setfiletype" : 0
\	},
\}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-scripts/Colour-Sampler-Pack'
# hook_add = '''
# syntax on
# colorscheme wuye
# '''

[[plugins]]
repo = 'joshdick/onedark.vim'
depends = ['Colour-Sampler-Pack']
hook_add = '''
if (empty($TMUX))
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif

if $ARCHI != 'darwin'
  if (has("autocmd") && !has("gui_running"))
    augroup colorset
      autocmd!
      let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
      autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white })
    augroup END
  endif
endif

syntax on
colorscheme onedark
'''


[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
let g:airline#extensions#tabline#enabled = 0
let g:airline_theme='angr'
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'


[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = '''
let g:gundo_right = 1
nnoremap <F8> :GundoToggle<CR>
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
  \ 'python': ['flake8', 'pylint', 'pep8', 'pyflakes'],
  \ 'go': ['go', 'govet', 'gotype', 'golint'],
  \ }

let g:ale_fixers = {
  \ 'python': ['autopep8', 'black', 'isort'],
  \ }

let g:ale_ruby_rubocop_options = '--except Style/AsciiComments'

let g:ale_python_pylint_executable = g:python3_host_prog
" let g:ale_python_pylint_args XXX: see pylintrc
let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8 --ignore=E501'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'

let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1

let g:airline#extensions#ale#enabled = 1
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'zackhsi/fzf-tags'
depends = ['fzf.vim']

[[plugins]]
repo = 'junegunn/fzf.vim'
# depends = ['fzf']
hook_add = '''
let g:fzf_layout = { 'left': '~40%' }
nnoremap <silent> <Leader><C-f> :<C-u>FZF<CR>
nnoremap <C-]> :<C-u>FZFTags<CR>
'''

[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tpope/vim-repeat'



[[plugins]]
repo = 'vim-scripts/DirDiff.vim'



[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'
[[plugins]]
repo = 'kana/vim-smartinput'
on_event = 'InsertEnter'
hook_add = '''
let g:smartinput_no_default_key_mappings = 1
'''
hook_post_source = '''
" ERB
call smartinput#map_to_trigger('i', '%', '%', '%')
call smartinput#define_rule({
\   'at': '<\%#', 'char': '%', 'input': '%=  %><Left><Left><Left>',
\   'filetype': ['eruby', 'eelixir'],
\ })
call smartinput#define_rule({
\   'at': '%.*\%#%', 'char': '%', 'input': '',
\   'filetype': ['eruby', 'eelixir'],
\ })
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

let g:neosnippet#snippets_directory='~/.vim/snippets'
'''

# TODO: Later
#
# [[plugins]]
# repo = 'thinca/vim-quickrun'


[[plugins]]
repo = 'tpope/vim-fugitive'

#
# [[plugins]]
# repo = 'airblade/vim-gitgutter'
# hook_add = '''
# set updatetime=1
# let g:gitgutter_async=1
# let g:gitgutter_enabled=0  " this is so slow
# let g:gitgutter_log=0
# '''
#

[[plugins]]
repo = 'tpope/vim-commentary'

