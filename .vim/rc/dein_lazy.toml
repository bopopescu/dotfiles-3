


[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = '''
let g:gundo_right = 1
nnoremap <F8> :GundoToggle<CR>
'''


[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
on_cmd = 'Denite'
on_event = 'BufRead'
hook_add = '''
nnoremap <silent> <Leader><C-f> :<C-u>DeniteBufferDir -split=vertical -vertical-preview -auto-action=preview -direction=topleft file<CR>
nnoremap <silent> <Leader><C-r> :<C-u>DeniteBufferDir -split=vertical -vertical-preview -auto-action=preview -direction=topleft file/rec<CR>
nnoremap <silent> <Leader>y     :<C-u>Denite          -split=vertical -direction=topleft neoyank<CR>
nnoremap <silent> <C-b>         :<C-u>Denite          -split=vertical -direction=topleft buffer file_mru<CR>


autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  inoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
  nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction
'''
hook_post_source = '''
call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', ['.git', '.svn', 'node_modules'])
'''
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'Shougo/neoyank.vim'


[[plugins]]
repo = 'kien/rainbow_parentheses.vim'
hook_add = '''
" https://github.com/kien/rainbow_parentheses.vim
let g:rbpt_colorpairs = [
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['red',         'firebrick3'],
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['brown',       'firebrick3'],
    \ ['cyan',        'cyan'],
    \ ['red',         'red'],
    \ ['Green',       'Green'],
    \ ['Yellow',      'Yellow'],
    \ ]

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
'''



[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
let g:airline#extensions#tabline#enabled = 0
let g:airline_theme='angr'
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'



# TODO: Later
#
# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['Shougo/neosnippet-snippets']
# hook_add = '''
# let g:neosnippet#snippets_directory='~/.vim/snippets'
# " Plugin key-mappings.
# imap <C-k>     <Plug>(neosnippet_expand_or_jump)
# smap <C-k>     <Plug>(neosnippet_expand_or_jump)
# xmap <C-k>     <Plug>(neosnippet_expand_target)
# " SuperTab like snippets behavior.
# smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
# " For conceal markers.
# if has('conceal')
#   set conceallevel=2 concealcursor=niv
# endif
# '''
#
# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'



# TODO: Later
#
# [[plugins]]
# repo = 'thinca/vim-quickrun'



# TODO: Lster  error (syntax) check
# NeoBundle "scrooloose/syntastic"
# NeoBundle "neomake/neomake"



[[plugins]]
repo = 'vim-scripts/DirDiff.vim'


[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tpope/vim-repeat'





[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'
[[plugins]]
repo = 'kana/vim-smartinput'
on_event = 'InsertEnter'
hook_add = '''
let g:smartinput_no_default_key_mappings = 1
'''
hook_post_source = '''
" ERB
call smartinput#map_to_trigger('i', '%', '%', '%')
call smartinput#define_rule({
\   'at': '<\%#', 'char': '%', 'input': '%=  %><Left><Left><Left>',
\   'filetype': ['eruby', 'eelixir'],
\ })
call smartinput#define_rule({
\   'at': '%.*\%#%', 'char': '%', 'input': '',
\   'filetype': ['eruby', 'eelixir'],
\ })
'''
